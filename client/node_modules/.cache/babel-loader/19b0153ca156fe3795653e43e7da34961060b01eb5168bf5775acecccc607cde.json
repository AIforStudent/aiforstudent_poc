{"ast":null,"code":"var _jsxFileName = \"/Users/abhinavprakash/Desktop/aiforstudent_poc/client/src/pages/BlogPost.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/BlogPost.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlogPost = () => {\n  _s();\n  const {\n    blogId\n  } = useParams();\n  const [blog, setBlog] = useState(null);\n  const [relatedPosts, setRelatedPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function fetchBlogAndRelated() {\n      try {\n        // Fetch individual blog post by id\n        const resBlog = await fetch(`http://127.0.0.1:5001/api/blogs/${blogId}`);\n        if (!resBlog.ok) {\n          throw new Error('Failed to fetch blog post');\n        }\n        const blogData = await resBlog.json();\n        setBlog(blogData);\n\n        // Fetch all blogs for related posts computation\n        const resAll = await fetch('http://127.0.0.1:5001/api/blogs');\n        if (!resAll.ok) {\n          throw new Error('Failed to fetch blog posts');\n        }\n        const allBlogs = await resAll.json();\n\n        // Compute related posts from blogs with same category or common tags\n        const related = allBlogs.filter(post => {\n          // Exclude current post (adjust comparison if your backend returns _id instead of id)\n          if (post.id === blogId || post._id === blogId) return false;\n          // Check same category\n          if (post.category === blogData.category) return true;\n          // Check for common tags\n          if (blogData.tags && post.tags) {\n            const commonTags = blogData.tags.filter(tag => post.tags.includes(tag));\n            if (commonTags.length > 0) return true;\n          }\n          return false;\n        }).slice(0, 3); // Limit to 3 related posts\n\n        setRelatedPosts(related);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n      // Scroll to top when the component mounts\n      window.scrollTo(0, 0);\n    }\n    fetchBlogAndRelated();\n  }, [blogId]);\n\n  // Automatically redirect to the external article when blog data is loaded\n  useEffect(() => {\n    if (blog && blog.externalLink) {\n      window.location.href = blog.externalLink;\n    }\n  }, [blog]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading article...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n  if (!blog) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Blog post not found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 47\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blog-post-page\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Redirecting to original site...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(BlogPost, \"4ylb5KIkbcHPWW64eUTGjV8pL/o=\", false, function () {\n  return [useParams];\n});\n_c = BlogPost;\nexport default BlogPost;\nvar _c;\n$RefreshReg$(_c, \"BlogPost\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","BlogPost","_s","blogId","blog","setBlog","relatedPosts","setRelatedPosts","loading","setLoading","fetchBlogAndRelated","resBlog","fetch","ok","Error","blogData","json","resAll","allBlogs","related","filter","post","id","_id","category","tags","commonTags","tag","includes","length","slice","error","console","window","scrollTo","externalLink","location","href","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/abhinavprakash/Desktop/aiforstudent_poc/client/src/pages/BlogPost.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/BlogPost.css';\n\nconst BlogPost = () => {\n  const { blogId } = useParams();\n  const [blog, setBlog] = useState(null);\n  const [relatedPosts, setRelatedPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchBlogAndRelated() {\n      try {\n        // Fetch individual blog post by id\n        const resBlog = await fetch(`http://127.0.0.1:5001/api/blogs/${blogId}`);\n        if (!resBlog.ok) {\n          throw new Error('Failed to fetch blog post');\n        }\n        const blogData = await resBlog.json();\n        setBlog(blogData);\n\n        // Fetch all blogs for related posts computation\n        const resAll = await fetch('http://127.0.0.1:5001/api/blogs');\n        if (!resAll.ok) {\n          throw new Error('Failed to fetch blog posts');\n        }\n        const allBlogs = await resAll.json();\n\n        // Compute related posts from blogs with same category or common tags\n        const related = allBlogs.filter(post => {\n          // Exclude current post (adjust comparison if your backend returns _id instead of id)\n          if (post.id === blogId || post._id === blogId) return false;\n          // Check same category\n          if (post.category === blogData.category) return true;\n          // Check for common tags\n          if (blogData.tags && post.tags) {\n            const commonTags = blogData.tags.filter(tag => post.tags.includes(tag));\n            if (commonTags.length > 0) return true;\n          }\n          return false;\n        }).slice(0, 3); // Limit to 3 related posts\n\n        setRelatedPosts(related);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n      // Scroll to top when the component mounts\n      window.scrollTo(0, 0);\n    }\n    \n    fetchBlogAndRelated();\n  }, [blogId]);\n\n  // Automatically redirect to the external article when blog data is loaded\n  useEffect(() => {\n    if (blog && blog.externalLink) {\n      window.location.href = blog.externalLink;\n    }\n  }, [blog]);\n\n  if (loading) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading article...</p>\n      </div>\n    );\n  }\n  \n  if (!blog) {\n    return <div className=\"loading-container\"><p>Blog post not found.</p></div>;\n  }\n  \n  return (\n    <div className=\"blog-post-page\">\n      <p>Redirecting to original site...</p>\n    </div>\n  );\n};\n\nexport default BlogPost;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}