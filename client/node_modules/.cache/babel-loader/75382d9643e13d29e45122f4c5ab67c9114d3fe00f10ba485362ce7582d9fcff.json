{"ast":null,"code":"var _jsxFileName = \"/Users/abhinavprakash/Desktop/aiforstudent_poc/client/src/components/BlogCard.jsx\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../styles/BlogCard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlogCard = ({\n  blog,\n  featured\n}) => {\n  // Helper function: Convert different date formats to a readable string.\n  const formatDate = date => {\n    let d;\n    // If date is an object containing a $date key, extract it\n    if (date && typeof date === \"object\" && date.$date) {\n      // If $date itself is an object (e.g. MongoDB style) or a string\n      d = new Date(date.$date);\n    } else if (typeof date === \"string\") {\n      d = new Date(date);\n    } else {\n      return \"\";\n    }\n    // Format the date as e.g. \"February 28, 2025\"\n    return d.toLocaleDateString(\"en-US\", {\n      month: \"long\",\n      day: \"numeric\",\n      year: \"numeric\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `blog-card ${featured ? \"featured\" : \"\"}`,\n    children: /*#__PURE__*/_jsxDEV(Link, {\n      to: `/blog/${blog.id || blog._id}`,\n      className: \"blog-card-link\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blog-card-image\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: blog.coverImage,\n          alt: blog.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blog-card-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: blog.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"blog-card-meta\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"blog-card-date\",\n            children: formatDate(blog.date)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"blog-card-read-time\",\n            children: [blog.readTime, \" min read\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: blog.excerpt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_c = BlogCard;\nexport default BlogCard;\nvar _c;\n$RefreshReg$(_c, \"BlogCard\");","map":{"version":3,"names":["React","Link","jsxDEV","_jsxDEV","BlogCard","blog","featured","formatDate","date","d","$date","Date","toLocaleDateString","month","day","year","className","children","to","id","_id","src","coverImage","alt","title","fileName","_jsxFileName","lineNumber","columnNumber","readTime","excerpt","_c","$RefreshReg$"],"sources":["/Users/abhinavprakash/Desktop/aiforstudent_poc/client/src/components/BlogCard.jsx"],"sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../styles/BlogCard.css\";\n\nconst BlogCard = ({ blog, featured }) => {\n  // Helper function: Convert different date formats to a readable string.\n  const formatDate = (date) => {\n    let d;\n    // If date is an object containing a $date key, extract it\n    if (date && typeof date === \"object\" && date.$date) {\n      // If $date itself is an object (e.g. MongoDB style) or a string\n      d = new Date(date.$date);\n    } else if (typeof date === \"string\") {\n      d = new Date(date);\n    } else {\n      return \"\";\n    }\n    // Format the date as e.g. \"February 28, 2025\"\n    return d.toLocaleDateString(\"en-US\", {\n      month: \"long\",\n      day: \"numeric\",\n      year: \"numeric\"\n    });\n  };\n\n  return (\n    <div className={`blog-card ${featured ? \"featured\" : \"\"}`}>\n      <Link to={`/blog/${blog.id || blog._id}`} className=\"blog-card-link\">\n        <div className=\"blog-card-image\">\n          <img\n            src={blog.coverImage}\n            alt={blog.title}\n          />\n        </div>\n        <div className=\"blog-card-content\">\n          <h3>{blog.title}</h3>\n          <div className=\"blog-card-meta\">\n            <span className=\"blog-card-date\">{formatDate(blog.date)}</span>\n            <span className=\"blog-card-read-time\">\n              {blog.readTime} min read\n            </span>\n          </div>\n          <p>{blog.excerpt}</p>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default BlogCard;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAS,CAAC,KAAK;EACvC;EACA,MAAMC,UAAU,GAAIC,IAAI,IAAK;IAC3B,IAAIC,CAAC;IACL;IACA,IAAID,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACE,KAAK,EAAE;MAClD;MACAD,CAAC,GAAG,IAAIE,IAAI,CAACH,IAAI,CAACE,KAAK,CAAC;IAC1B,CAAC,MAAM,IAAI,OAAOF,IAAI,KAAK,QAAQ,EAAE;MACnCC,CAAC,GAAG,IAAIE,IAAI,CAACH,IAAI,CAAC;IACpB,CAAC,MAAM;MACL,OAAO,EAAE;IACX;IACA;IACA,OAAOC,CAAC,CAACG,kBAAkB,CAAC,OAAO,EAAE;MACnCC,KAAK,EAAE,MAAM;MACbC,GAAG,EAAE,SAAS;MACdC,IAAI,EAAE;IACR,CAAC,CAAC;EACJ,CAAC;EAED,oBACEZ,OAAA;IAAKa,SAAS,EAAE,aAAaV,QAAQ,GAAG,UAAU,GAAG,EAAE,EAAG;IAAAW,QAAA,eACxDd,OAAA,CAACF,IAAI;MAACiB,EAAE,EAAE,SAASb,IAAI,CAACc,EAAE,IAAId,IAAI,CAACe,GAAG,EAAG;MAACJ,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAClEd,OAAA;QAAKa,SAAS,EAAC,iBAAiB;QAAAC,QAAA,eAC9Bd,OAAA;UACEkB,GAAG,EAAEhB,IAAI,CAACiB,UAAW;UACrBC,GAAG,EAAElB,IAAI,CAACmB;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNzB,OAAA;QAAKa,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAChCd,OAAA;UAAAc,QAAA,EAAKZ,IAAI,CAACmB;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACrBzB,OAAA;UAAKa,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC7Bd,OAAA;YAAMa,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAAEV,UAAU,CAACF,IAAI,CAACG,IAAI;UAAC;YAAAiB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC/DzB,OAAA;YAAMa,SAAS,EAAC,qBAAqB;YAAAC,QAAA,GAClCZ,IAAI,CAACwB,QAAQ,EAAC,WACjB;UAAA;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CAAC,eACNzB,OAAA;UAAAc,QAAA,EAAIZ,IAAI,CAACyB;QAAO;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAACG,EAAA,GA3CI3B,QAAQ;AA6Cd,eAAeA,QAAQ;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}